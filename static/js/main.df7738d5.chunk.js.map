{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/SwitchSourceButton.js","constants.js","components/Scroll.js","components/ErrorBoundary.js","robots.js","containers/App.js","actions.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","SwitchSourceButton","switchSource","label","onClick","class","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","username","App","onRequestRobots","source","prevProps","searchField","onSearchChange","onSwitchSource","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","newSource","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.df7738d5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib pa3 ma2 bw2 shadow-5 grow'>\r\n\t\t\t<img alt='robot' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t    \t{\r\n\t    \t\trobots.map((user, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t    \t}\r\n\t    </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input \r\n\t\t\t\tclassName='pa3 ma3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='search robots' \r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport {\r\n\tSOURCE_API,\r\n\tSOURCE_LOCAL\r\n} from '../constants.js';\r\n\r\nconst SwitchSourceButton = ({ switchSource, label }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<button \r\n\t\t\t\tclassName='f6 link dim pv2 mb2 dib w5 br4 white bg-near-black'\r\n\t\t\t\ttype='button' \r\n\t\t\t\tname='switch source'\r\n\t\t\t\tonClick={switchSource}\r\n\t\t\t>Switch robots source to <span class=\"b\">{label === SOURCE_API ? SOURCE_LOCAL : SOURCE_API}</span></button>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SwitchSourceButton;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const SWITCH_SOURCE = 'SWITCH_SOURCE';\r\nexport const SOURCE_API = 'API';\r\nexport const SOURCE_LOCAL = 'LOCAL';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\t return (\r\n\t \t<div style={{overflowY: 'scroll', border: '5px solid black', height: '500px'}}>{props.children}</div>\r\n\t )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Ooops. That's not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","export const robots = [\r\n\t{\r\n\t\tid: 1,\r\n\t\tname: 'Martie',\r\n\t\tusername: 'bear',\r\n\t\temail: 'bear@gmail.com'\r\n\t},\r\n\t{\r\n\t\tid: 2,\r\n\t\tname: 'Rachie',\r\n\t\tusername: 'cutie',\r\n\t\temail: 'cutie@gmail.com'\r\n\t},\r\n\t{\r\n\t\tid: 3,\r\n\t\tname: 'Owen',\r\n\t\tusername: 'leonard',\r\n\t\temail: 'leonard@gmail.com'\r\n\t},\r\n\t{\r\n\t\tid: 4,\r\n\t\tname: 'Clazza',\r\n\t\tusername: 'clairebear',\r\n\t\temail: 'clairebear@gmail.com'\r\n\t}\r\n]","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport SwitchSourceButton from '../components/SwitchSourceButton';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\nimport { setSearchField, switchSource, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\tsource: state.searchRobots.source,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonSwitchSource: () => dispatch(switchSource()),\r\n\t\tonRequestRobots: (source) => dispatch(requestRobots(source))\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots(this.props.source);\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps) {\r\n\t\t// Reload robots if the source changed\r\n\t\tif (this.props.source !== prevProps.source) {\r\n\t\t\tthis.props.onRequestRobots(this.props.source);\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { searchField, source, onSearchChange, onSwitchSource, robots, isPending } = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn isPending ?\r\n\t\t\t<h1>Loading</h1> :\r\n\t\t\t( \r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'>RoboFriends  -  {source}</h1>\r\n\t\t\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t\t<SwitchSourceButton switchSource={onSwitchSource} label={source}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tSWITCH_SOURCE,\r\n\tSOURCE_API,\r\n\tSOURCE_LOCAL,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nimport { robots } from './robots.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\nexport const switchSource = () => ({\r\n\ttype: SWITCH_SOURCE\r\n})\r\n\r\nexport const requestRobots = (source) => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\tif (source === SOURCE_API) {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}));\r\n\t} else if (source === SOURCE_LOCAL) {\r\n\t\tdispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: robots});\r\n\t}\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tSWITCH_SOURCE,\r\n\tSOURCE_API,\r\n\tSOURCE_LOCAL,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: '',\r\n\tsource: SOURCE_API\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\r\n\t\tcase SWITCH_SOURCE:\r\n\t\t\tvar newSource = state.source === SOURCE_API ? SOURCE_LOCAL : SOURCE_API;\r\n\t\t\treturn Object.assign({}, state, { source: newSource});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true })\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false})\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false})\r\n\t\tdefault: return state;\r\n\t}\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport 'tachyons';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots});\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n  \t<Provider store={store}>\r\n  \t\t<App />\r\n  \t</Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}